---
import type { AchievementProps } from '../../types';
import { skillBuilder } from '../../utils';

const {
  title,
  company,
  // description,
  education,
  employeeType,
  endYear,
  startMonth,
  startYear,
  companyLocation,
  endMonth,
  location,
  school,
  skills,
  index,
} = Astro.props as AchievementProps & { index: number };

const skillsList = skillBuilder(skills);
---

<li
  class="relative after:content-[''] after:absolute after:inset-y-[0] after:left-[28px] after:-translate-x-1/2 after:w-[2px] after:opacity-20 after:bg-gray after:-z-[2]"
>
  <div
    class='ms-6 text-[2rem] before:absolute before:left-[0] before:-translate-y-1 before:text-body-large before:font-medium before:flex before:items-center before:justify-center before:rounded-full before:text-white before:z-[1] numbering [&>*:last-child]:pb-2'
  >
    <h3 class='font-medium tracking-normal mb-1'>{title || school}</h3>
    <div class='flex flex-col gap-[0.4rem] leading-[1.4]'>
      {
        company && (
          <span>
            {company} {employeeType && `· ${employeeType}`}
          </span>
        )
      }
      {education && <span>{education}</span>}
      <span class='text-gray' id={`duration-${index}`}
        >{startMonth}
        {startYear} - {endMonth}
        {endYear} ·
      </span>

      <script
        define:vars={{
          startMonth,
          startYear,
          endMonth,
          endYear,
          company,
          index,
        }}
      >
        const monthToNumber = {
          Jan: 1,
          Feb: 2,
          Mar: 3,
          Apr: 4,
          May: 5,
          Jun: 6,
          Jul: 7,
          Aug: 8,
          Sep: 9,
          Oct: 10,
          Nov: 11,
          Dec: 12,
        };

        const _resolveEndMonth = (endMonth, endYear) => {
          if (endMonth && endYear) {
            return +endYear * 12 + monthToNumber[endMonth];
          }

          const date = new Date();
          const currentMonth = date.getMonth() + 1;
          const currentYear = date.getFullYear();
          return currentYear * 12 + currentMonth;
        };

        const monthToYearAndMonths = (value) => {
          const year = Math.floor(value / 12);
          const month = value % 12;
          return { year, month };
        };

        const calculateMonths = (startMonth, startYear, endMonth, endYear) => {
          const startMonthNumber = monthToNumber[startMonth];
          const numberOfMonths =
            _resolveEndMonth(endMonth, endYear) -
            (+startYear * 12 + startMonthNumber) +
            1;

          const { year, month } = monthToYearAndMonths(numberOfMonths);

          if (year === 0) {
            return `${month} mos`;
          } else if (year === 1) {
            return `${year} yr ${month} mos`;
          } else {
            return `${year} yrs ${month} mos`;
          }
        };

        const duration = calculateMonths(
          startMonth,
          startYear,
          endMonth,
          endYear
        );
        if (company && duration) {
          const durationElement = document.getElementById(`duration-${index}`);
          const text = document.createTextNode(duration);
          durationElement.appendChild(text);
        }
      </script>
      {
        companyLocation && (
          <span class='text-gray'>
            {companyLocation} {location && `· ${location}`}
          </span>
        )
      }
    </div>
    {
      skillsList.length !== 0 && (
        <span class='leading-[1.4] mt-2 inline-block'>
          <strong class='tracking-wider'>Skills:</strong>
          {skillsList}
        </span>
      )
    }
  </div>
</li>

<style define:vars={{ index }}>
  .numbering::before {
    counter-reset: index var(--index);
    content: counter(index);
    height: 56px;
    width: 56px;
    box-shadow: 0 0 0 10px #f8f9fa, inset 0 0 0 4px #212529,
      inset 0 0 0 8px #f8f9fa, inset 0 0 0 28px #212529;
  }
</style>
